crie um html que possui possui uma tabela a esquerda com os nomes dos pacientes do banco de dados, com largura de 20% da tela, com um filtro por nome de paciente e uma caixa de verificação por padrao nao verificada, com a escrita ao lado esquerdo: Declaração para o CRAS? 
o html, atraves da biblioteca jsPDF, preenche um documento em pdf, a partir de um banco de "dados.js". O pdf já existe com logotipo da loja, arquivo "dec.pdf"
O banco de dados possui a seguinte estrutura:
const pacientes = [
    {
        "TIPO DE LOGRADOURO": "AVENIDA",
        "LOGRADOURO": "JOAO ALVES DA COSTA",
        "NÚMERO": "08",
        "CEP": "33350000",
        "BAIRRO": "DOM PEDRO I",
        "COMPLEMENTO": "FUNDOS",
        "PONTO DE REFERÊNCIA": "-",
        "NOME CIDADÃO": "ALEXANDRE GOULART COSTA",
        "SEXO": "MASCULINO",
        "DATA DE NASCIMENTO": "07-03-1992",
        "CPF": "11557884609",
        "CNS": "160301084930002",
        "É O RESPONSÁVEL FAMILIAR?": "SIM",
        "CPF/CNS RESPONSÁVEL FAMILIAR": "11557884609",
        "NOME DO RESPONSÁVEL FAMILIAR": "ALEXANDRE GOULART COSTA"
    },
    {
        "TIPO DE LOGRADOURO": "AVENIDA",
        "LOGRADOURO": "JOAO ALVES DA COSTA",
        "NÚMERO": "08",
        "CEP": "33350000",
        "BAIRRO": "DOM PEDRO I",
        "COMPLEMENTO": "FUNDOS",
        "PONTO DE REFERÊNCIA": "-",
        "NOME CIDADÃO": "ALESSANDRA CARDOSO GOULART",
        "SEXO": "FEMININO",
        "DATA DE NASCIMENTO": "28-09-1995",
        "CPF": "12281692680",
        "CNS": "898003053390819",
        "É O RESPONSÁVEL FAMILIAR?": "NÃO",
        "CPF/CNS RESPONSÁVEL FAMILIAR": "11557884609",
        "NOME DO RESPONSÁVEL FAMILIAR": "ALEXANDRE GOULART COSTA"
    },

serao preenchidos no pdf as seguintes informações:
"NOME CIDADÃO", "TIPO DE LOGRADOURO", "LOGRADOURO", "NÚMERO",  "COMPLEMENTO", "BAIRRO" e  DATA DE HOJE, que será a o sistema.
se a caixa de verificação estiver verificada além no nome selecionado também será adcionado ao documentos, acrescido de virgula e espaço, os nomes de todos os cidadaos que coincidirem as informações: "TIPO DE LOGRADOURO", "LOGRADOURO", "NÚMERO",  "COMPLEMENTO", "BAIRRO", caso contrário só o nome do cidadão selecionado será incluido.

======================================================================================================================================================================================================================================


Versão 2

=======================================================================================================================================================================================================================================
Altere o código abaixo para incluir um titulo "Emissão de Declaração de Residência", troque a posição do texto "Declaração para o CRAS?" para o lado esquerdo do chequebox e defina para o imput o percentual de 90% do sidebar.

quando o chequebox for checkado exiba em uma outra lista,  os nomes que serão incluídos na Declaração e crie uma nova checkbox que estará por padrao checkada que ficará a frente dos nomes, que permitirá a exclusão de nomes de cidadãos, cuja checkbox for desabilitada, constando no pdf gerado apenas os nomes que o usuário manteve checkada. 

código:
<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <title>Declaração de Residência</title>
  <style>
    body {
      display: flex;
      font-family: Arial, sans-serif;
      margin: 0;
      height: 100vh;
    }
    .sidebar {
      width: 25%;
      background: #f4f4f4;
      padding: 6px;
      border-right: 1px solid #ccc;
      overflow-y: auto;
    }
    .sidebar input {
      width: 100%;
      padding: 6px;
      margin-bottom: 10px;
    }
    .sidebar label {
      display: flex;
      align-items:center;
      margin-bottom: 10px;
    }
    .sidebar table {
      width: 100%;
      border-collapse: collapse;
    }
    .sidebar td {
      padding: 6px;
      cursor: pointer;
    }
    .sidebar tr:hover {
      background: #ddd;
    }
    .content {
      flex: 1;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    button {
      padding: 10px 15px;
      font-size: 14px;
      background: #3498db;
      color: #fff;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
    button:hover {
      background: #2980b9;
    }
  </style>
</head>
<body>
  <div class="sidebar">
    <input type="text" id="filtro" placeholder="Buscar paciente...">
    <label><input type="checkbox" id="cras"> Declaração para o CRAS?</label>
    <table id="tabelaPacientes"></table>
  </div>
  <div class="content">
    <button id="gerarPDF">Gerar Declaração PDF</button>
  </div>

  <script src="dados.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.plugin.autotable.min.js"></script>
  <script>
    const { jsPDF } = window.jspdf;
    let pacienteSelecionado = null;

    const tabela = document.getElementById("tabelaPacientes");
    const filtro = document.getElementById("filtro");
    const checkCRAS = document.getElementById("cras");

    function renderTabela(dados) {
      tabela.innerHTML = "";
      dados.forEach(p => {
        const tr = document.createElement("tr");
        tr.innerHTML = `<td>${p["NOME CIDADÃO"]}</td>`;
        tr.onclick = () => {
          pacienteSelecionado = p;
          document.querySelectorAll("tr").forEach(el => el.style.background="");
          tr.style.background = "#b3d9ff";
        };
        tabela.appendChild(tr);
      });
    }
    renderTabela(pacientes);

    filtro.addEventListener("input", () => {
      const txt = filtro.value.toLowerCase();
      renderTabela(pacientes.filter(p => p["NOME CIDADÃO"].toLowerCase().includes(txt)));
    });

    document.getElementById("gerarPDF").addEventListener("click", async () => {
      if (!pacienteSelecionado) {
        alert("Selecione um paciente.");
        return;
      }

      const pdfBytes = await fetch("dec.pdf").then(r => r.arrayBuffer());
      const pdfDoc = await PDFLib.PDFDocument.load(pdfBytes);
      const pages = pdfDoc.getPages();
      const page = pages[0];
      const { height } = page.getSize();

      const nome = pacienteSelecionado["NOME CIDADÃO"];
      const tipo = pacienteSelecionado["TIPO DE LOGRADOURO"];
      const logradouro = pacienteSelecionado["LOGRADOURO"];
      const numero = pacienteSelecionado["NÚMERO"];
      const compl = pacienteSelecionado["COMPLEMENTO"];
      const bairro = pacienteSelecionado["BAIRRO"];

      // Se CRAS marcado, incluir todos os nomes da mesma residência
      let nomes = [nome];
      if (checkCRAS.checked) {
        nomes = pacientes
          .filter(p => 
            p["TIPO DE LOGRADOURO"] === tipo &&
            p["LOGRADOURO"] === logradouro &&
            p["NÚMERO"] === numero &&
            p["COMPLEMENTO"] === compl &&
            p["BAIRRO"] === bairro
          )
          .map(p => p["NOME CIDADÃO"]);
      }
      const nomesFinal = nomes.join(", ");

      const font = await pdfDoc.embedFont(PDFLib.StandardFonts.Helvetica);

      function drawTextWrapped(txt, x, y, maxWidth, lineHeight=14) {
        const words = txt.split(" ");
        let line = "";
        let offset = 0;
        words.forEach((word,i) => {
          const testLine = line + word + " ";
          const width = font.widthOfTextAtSize(testLine, 12);
          if (width > maxWidth && i > 0) {
            page.drawText(line, { x, y: y - offset, size: 12, font });
            line = word + " ";
            offset += lineHeight;
          } else {
            line = testLine;
          }
        });
        page.drawText(line, { x, y: y - offset, size: 12, font });
      }

      // Coordenadas ajustadas ao modelo (baseado no dec.pdf enviado)
      drawTextWrapped("DECLARO QUE:", 70, height - 170, 400);
      drawTextWrapped(nomesFinal, 70, height - 190, 400);
      drawTextWrapped("RESIDE(M) NO SEGUINTE", 355, height - 220, 400);
      drawTextWrapped("ENDEREÇO:", 70, height - 240, 400);
      drawTextWrapped(`${tipo} ${logradouro}`, 160, height - 240, 400);
      drawTextWrapped("Nº", 70, height - 260, 400);
      drawTextWrapped(numero, 90, height - 260, 400);
      drawTextWrapped("COMPLEMENTO:", 120, height - 260, 400);
      drawTextWrapped(compl, 230, height - 260, 400);
      drawTextWrapped("BAIRRO", 70, height - 280, 400);
      drawTextWrapped(bairro, 130, height - 280, 400);
      drawTextWrapped("SÃO JOSÉ DA LAPA-MG,", 160, height - 330, 400);
      drawTextWrapped(".", 370, height - 330, 400);

      // Data atual
      const hoje = new Date();
      const dataFormatada = hoje.toLocaleDateString("pt-BR");
      page.drawText(dataFormatada, { x: 305, y: height - 330, size: 12, font });

      const pdfBytesFinal = await pdfDoc.save();
      const blob = new Blob([pdfBytesFinal], { type: "application/pdf" });
      const link = document.createElement("a");
      link.href = URL.createObjectURL(blob);
      link.download = "declaracao.pdf";
      link.click();
    });
  </script>

  <!-- Import PDF-LIB -->
  <script src="https://unpkg.com/pdf-lib/dist/pdf-lib.min.js"></script>
</body>
</html>


